#!/bin/bash

MENU_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
source $MENU_DIR/lib/menu_helpers.sh

MPD_HOST='192.168.1.0'     # Default: 'localhost'
MPD_PORT='6600'            # Default: '6600'
MUSIC_DIR='/home/sanford/docs/music'
CACHE_FILE='/tmp/mpcmenu_cache'

tempOut=$(mpc -p ${MPD_PORT} -h ${MPD_HOST} --format "")

# playState=$(echo "${tempOut}" | sed -n 2p | awk '{ print $1; }')

stateLine=$(echo "${tempOut}" | sed 's/volume://')
randomState=$(awk '/repeat:/{ print $5; }' <<< "${stateLine}")
repeatState=$(awk '/repeat:/{ print $3; }' <<< "${stateLine}")
singleState=$(awk '/repeat:/{ print $7; }' <<< "${stateLine}")
consumeState=$(awk '/repeat:/{ print $9; }' <<< "${stateLine}")

# Menu Items
mainMenu="[Select]
[PushDir]
[PushLoop]
[Current]
[Play]
[Stop]
[Pause]
[Load]
[Playlist]
[Clear]
[Previous]
[Next]
[Seek]
[Replay]
[Random: ${randomState}]
[Repeat: ${repeatState}]
[Single: ${singleState}]
[Consume: ${consumeState}]
[Lyrics]
[Update]"

playlistOptions="[AddAll]
[Remove]
[Clear]
[Save]
[Load]
[Delete]"

seekOptions="0%
10%
20%
30%
40%
50%
60%
70%
80%
90%"

filterOptions="any
artist
album
title
track
name
genre
date
composer
performer
comment
disc
filename"

action=$(menu "Option: " "${mainMenu}")
case "${action}" in
    '[Select]')
        candidates=$(mpc -p ${MPD_PORT} -h ${MPD_HOST} playlist --format '%position%  [%album% - ][%artist% - ]%title%')
        selection=$(menu "Song: " "${candidates}")

        # Only select song if not in consume ("playback queue") mode.
        if [[ "${consumeState}" != "on" ]]; then
            if [[ -n "${selection}" ]]; then
                songNum=$(awk '{print $1}' <<< "${selection}")
                mpc -p ${MPD_PORT} -h ${MPD_HOST} -q play "${songNum}"
            fi
        fi
        ;;
    '[PushDir]')
        pushd ${MUSIC_DIR} > /dev/null
        musicDirList=$(find . -type d | sed -e 's!^\./!!')
        popd > /dev/null
        query=$(menu "Add: " "${musicDirList}")

        if [[ -n "${query}" ]]; then
            mpc -p ${MPD_PORT} -h ${MPD_HOST} ls "${query}" | mpc -p ${MPD_PORT} -h ${MPD_HOST} -q add
        fi
        ;;
    '[PushLoop]')
        # if [[ ! -a "${CACHE_FILE}" || "${CACHE_FILE}" -ot "${MUSIC_DIR}" ]]; then
        #     notify-send "MPD:" "Building Cache"
        #     musicList=$(mpc -p ${MPD_PORT} -h ${MPD_HOST} listall | tee "${CACHE_FILE}")
        # else
        #     notify-send 'MPD:' 'Using Cache'
        #     musicList=$(<${CACHE_FILE})
        # fi

        filterType=$(menu "Filter Type: " "${filterOptions}")
        [[ -z "${filterType}" ]] && exit

        filterQuery=$(menu "Query (${filterType}): " "")

        # We should permit empty query strings so we can sift through all
        # elements of a filter type.

        # [[ -z "${filterQuery}" ]] && exit

        filterList=$(mpc -p ${MPD_PORT} -h ${MPD_HOST} search "${filterType}" "${filterQuery}")

        count=0
        selection="a"
        while [[ -n "${selection}" ]]; do
            selection=$(menu "Song ($count): " "${filterList}")
            echo " ${selection}"
            if [[ -n "${selection}" ]]; then
                mpc -p ${MPD_PORT} -h ${MPD_HOST} -q add "${selection}"
                ((count++))
            fi
        done
        ;;
    '[Current]')
        songInfo=$(mpc -p ${MPD_PORT} -h ${MPD_HOST} -f 'Title:  [%title%]\nArtist: [%artist%]\nAlbum:  [%album%]\n ')
        notify-send "MPD:" "${songInfo}"
        ;;
    '[Play]')
        mpc -p ${MPD_PORT} -h ${MPD_HOST} -q toggle
        ;;
    '[Stop]')
        mpc -p ${MPD_PORT} -h ${MPD_HOST} -q stop
        ;;
    '[Pause]')
        mpc -p ${MPD_PORT} -h ${MPD_HOST} -q toggle
        ;;
    '[Load]')
        choice=$(menu "Load: " "$(mpc -p ${MPD_PORT} -h ${MPD_HOST} lsplaylists)")
        if [[ -n "${choice}" ]]; then
            mpc -p ${MPD_PORT} -h ${MPD_HOST} -q stop
            mpc -p ${MPD_PORT} -h ${MPD_HOST} -q clear
            mpc -p ${MPD_PORT} -h ${MPD_HOST} -q load "${choice}"
            notify-send "MPD:" "Playlist \"${choice}\" Loaded"
        fi
        ;;
    '[Playlist]')
        action=$(menu "Option: " "${playlistOptions}")
        case "${action}" in
            '[AddAll]')
                mpc -p ${MPD_PORT} -h ${MPD_HOST} -q update
                mpc -p ${MPD_PORT} -h ${MPD_HOST} ls | mpc -p ${MPD_PORT} -h ${MPD_HOST} -q add
                ;;
            '[Remove]')
                selection="a"
                while [[ -n "${selection}" ]]; do
                    candidates=$(mpc -p ${MPD_PORT} -h ${MPD_HOST} playlist --format '%position%  [%album% - ][%artist% - ]%title%')
                    selection=$(menu "Song: " "${candidates}")

                    if [[ -n "${selection}" ]]; then
                        songNum=$(awk '{print $1}' <<< "${selection}")
                        mpc -p ${MPD_PORT} -h ${MPD_HOST} -q del "${songNum}"
                    fi
                done
            ;;
            '[Clear]')
                mpc -p ${MPD_PORT} -h ${MPD_HOST} -q clear
                notify-send "MPD:" "Playlist Cleared"
                ;;
            '[Load]')
                choice=$(menu "Load: " "$(mpc -p ${MPD_PORT} -h ${MPD_HOST} lsplaylists)")
                if [[ -n "${choice}" ]]; then
                    mpc -p ${MPD_PORT} -h ${MPD_HOST} -q stop
                    mpc -p ${MPD_PORT} -h ${MPD_HOST} -q clear
                    mpc -p ${MPD_PORT} -h ${MPD_HOST} -q load "${choice}"
                    notify-send "MPD:" "Playlist \"${choice}\" Loaded"
                fi
                ;;
            '[Save]')
                name=$(menu "Load: " "$(mpc -p ${MPD_PORT} -h ${MPD_HOST} lsplaylists)")
                if [[ -n "${name}" ]]; then
                    mpc -p ${MPD_PORT} -h ${MPD_HOST} save "${name}"
                    notify-send "MPD:" "Playlist \"${name}\" Saved"
                fi
                ;;
            '[Delete]')
                name=$(menu "Load: " "$(mpc -p ${MPD_PORT} -h ${MPD_HOST} lsplaylists)")
                if [[ -n "${name}" ]]; then
                    mpc -p ${MPD_PORT} -h ${MPD_HOST} rm "${name}"
                    notify-send "MPD:" "Playlist \"${name}\" Deleted"
                fi
                ;;
        esac
        ;;
    '[Clear]')
        mpc -p ${MPD_PORT} -h ${MPD_HOST} -q clear
        notify-send "MPD:" "Playlist Cleared"
        ;;
    '[Previous]')
        mpc -p ${MPD_PORT} -h ${MPD_HOST} -q prev
        ;;
    '[Next]')
        mpc -p ${MPD_PORT} -h ${MPD_HOST} -q next
        ;;
    '[Seek]')
        seek=$(menu "Seek: " "${seekOptions}")
        if [[ -n "${seek}" ]]; then
            mpc -p ${MPD_PORT} -h ${MPD_HOST} -q seek "${seek}"
        fi
        ;;
    '[Replay]')
        mpc -p ${MPD_PORT} -h ${MPD_HOST} -q stop
        mpc -p ${MPD_PORT} -h ${MPD_HOST} -q play
        ;;
    '[Random'*)
        mpc -p ${MPD_PORT} -h ${MPD_HOST} -q random
        ;;
    '[Repeat'*)
        mpc -p ${MPD_PORT} -h ${MPD_HOST} -q repeat
        ;;
    '[Single'*)
        mpc -p ${MPD_PORT} -h ${MPD_HOST} -q single
        ;;
    '[Consume'*)
        mpc -p ${MPD_PORT} -h ${MPD_HOST} -q consume
        ;;
    '[Lyrics]')
        song=$(mpc -p ${MPD_PORT} -h ${MPD_HOST} current)
        lyricsFile="$HOME/.lyrics/$song.txt"

        if [[ -e "${lyricsFile}" ]]; then
            # ${EDITOR:-gvim} "${lyricsFile}"
            # $TERMINAL -e "vim \"${lyricsFile}\"" & disown
            if [[ "${BACKEND}" == "fzf" ]]; then
                ${EDITOR:-gvim} "${lyricsFile}"
            else
                xdg-open "${lyricsFile}"
            fi
            # emacsclient --no-wait "${lyricsFile}" 2> /dev/null
        else
            notify-send "MPD:" "Lyrics for \"${song}\" not found"
            createFlag=$(confirm "Create Lyrics File?")
            if [[ "${createFlag,,}" == "yes" ]]; then
                touch "${lyricsFile}"
                notify-send "MPD:" "Created ${lyricsFile}"
            fi
        fi
        ;;
    '[Update]')
        notify-send "MPD Database" "Updating"
        mpc -p ${MPD_PORT} -h ${MPD_HOST} -q update
        ;;
esac
